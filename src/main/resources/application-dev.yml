# 개발 서버(테스트 서버)에서 실행할 때 사용
# PostgreSQL 사용 (실제 DB와 동일한 환경)

spring:
    # PostgreSQL 데이터베이스 설정
    datasource:
        url: jdbc:postgresql://localhost:5432/ecommerce_dev
        # jdbc:postgresql://localhost:5432/ecommerce_dev 의미:
        # - postgresql: PostgreSQL 사용
        # - localhost: DB 서버 주소 (같은 컴퓨터)
        # - 5432: PostgreSQL 기본 포트
        # - ecommerce_dev: 데이터베이스 이름 (개발용)

        driver-class-name: org.postgresql.Driver
        username: ${DB_USERNAME:postgres}
        # ${DB_USERNAME:postgres} 의미:
        # - 환경변수 DB_USERNAME이 있으면 그 값 사용
        # - 없으면 기본값 postgres 사용
        # 이렇게 하는 이유: 비밀번호를 코드에 직접 쓰지 않기 위해

        password: ${DB_PASSWORD:postgres123}

        # HikariCP 커넥션 풀 설정
        hikari:
            maximum-pool-size: 10
            # 최대 DB 연결 개수 (동시에 10개까지 DB 접속 가능)
            # 왜 제한? 무제한으로 열면 DB 서버가 죽을 수 있음

            minimum-idle: 5
            # 최소 유지 연결 개수 (항상 5개는 열어둠)
            # 왜? 매번 연결 생성하면 느림

            connection-timeout: 20000 # 20초
            # DB 연결 시도 타임아웃
            # 20초 안에 연결 안 되면 에러

    # JPA 설정
    jpa:
        hibernate:
            ddl-auto: create
            # validate 의미:
            # - 엔티티와 실제 테이블 구조가 일치하는지만 검증
            # - 테이블을 생성/수정/삭제 하지 않음
            # - 개발 서버에서는 validate 사용 권장
            # ⚠️ create, update는 위험! 데이터 날아갈 수 있음

        show-sql: true # SQL 출력 끔 (서버 로그가 너무 많아짐)
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                format_sql: true # ← SQL 예쁘게 포맷팅
                use_sql_comments: true # ← 어떤 쿼리인지 주석 추가
                default_batch_fetch_size: 100
                # PostgreSQL 전용 SQL 문법 사용

    # Flyway 설정
    flyway:
        enabled: true # Flyway 활성화
        baseline-on-migrate: true # 기존 DB에 적용 시 필요
        locations: classpath:db/migration # 마이그레이션 파일 위치
        sql-migration-suffixes: .sql # SQL 파일 확장자

# 로깅 레벨
logging:
    level:
        com.ecommerce: DEBUG # INFO, 우리 코드는 중요한 것만 로그, DEBUG ← 우리 코드 로그 출력
        org.hibernate.SQL: DEBUG # WARN SQL은 경고 수준만 출력, DEBUG ← SQL 쿼리 출력
        org.hibernate.type.descriptor.sql.BasicBinder: TRACE # ← 파라미터 값 출력
        org.springframework.security: DEBUG # Security는 상세하게 (디버깅용)

    # 로그 파일 저장
    file:
        name: logs/ecommerce-dev.log # logs 폴더에 로그 파일 생성
        max-size: 10MB # 파일 크기 제한
        max-history: 30 # 최대 30일치 보관
